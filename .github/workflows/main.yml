# This is a basic workflow to help you get started with Actions

name: Telematics API CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events for the main, devel branch
  push:
    # branches: [ * ]
  pull_request:
    branches: [ main, devel ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This job manages the dependencies and builds the repositories
  test-deps:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Set up the runner for compiling the repository
      - name: Build setup
        run: |
          export PATH=/home/runner/.local/bin:$PATH
          sudo apt-get update -qy
          sudo apt-get install cmake plantuml graphviz doxygen -qy
          pip3 install gcovr

  # This job manages the dependencies and builds the repositories
  build-repo:

    # Waits for dependencies to validated
    needs: test-deps

    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up the runner for compiling the repository
      - name: Build setup
        run: |
          sudo apt-get update -qy
          sudo apt-get install cmake plantuml graphviz -qy

      # Compiles the repository
      - name: Build repository
        run: |
          ./build.sh
          ./build.sh --sim --tests

  # This job manages the dependencies and builds the repositories
  build-and-test-repo:

    # Waits for dependencies to validated
    needs: build-repo

    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up the runner for compiling the repository
      - name: Build setup
        run: |
          sudo apt-get update -qy
          sudo apt-get install cmake plantuml graphviz doxygen -qy

      # Compiles the repository
      - name: Build repository
        run: ./build.sh --sim --tests --docs

      # Tests the production API
      - name: Test Production API
        run: ./build/telematics-api CI_BYPASS

      # Tests the ASPM Simulator
      - name: Test ASPM Simulator
        run: ./build/utils/asp_simulator/telematics-api-sim CI_BYPASS

      # Tests Python utils
      - name: Test Python utils
        run: |
          python2 utils/mobile_placeholder.py
          python2 utils/key_for_mobile_placeholder.py

      # Runs the repo unit test suite
      - name: Test API
        run: ./build/test/telematics-api-tests

      # Uploads docs artifact
      - name: Upload docs artifact
        uses: actions/upload-artifact@v2
        with:
          name: doxygen
          path: ./doc/html
          retention-days: 90


  # This job calls the unit test suite and generates a test coverage report
  generate-coverage-report:

    # Waits for dependencies to validated
    needs: build-repo

    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up the runner for compiling the repository
      - name: Build setup
        run: |
          export PATH=/home/runner/.local/bin:$PATH
          sudo apt-get update -qy
          sudo apt-get install cmake plantuml graphviz doxygen -qy
          pip3 install gcovr

      # Generates a coverage report
      - name: Generate coverage report
        run: ./build.sh --tests --coverage

      # Uploads coverage report artifact
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: ./build/coverage
          retention-days: 90
